(require vegas)

;; can redefine with generic versions (much) later

(define* first (fn* (arr) (. arr 0)))
(define* rest  (fn* (arr) (.slice arr 1)))
(define* core-symbol (fn* (name) (.coreSymbol Symbol name)))

;; redefine later


(define-macro* define 
  (fn* (sexp env)
       (let ((head (first (rest sexp)))
	     (tail (rest (rest sexp))))

	 (if (array? head)

	     (let ((name (first head))
		   (args (rest head)))

	       `(,(core-symbol "define*")
		 ,name
		 (,(core-symbol "fn*")
		  ,args
		  (,(core-symbol "block")
		   ,name
		   ,@tail))))
	     
	     `(,core-symbol "define*" ,head ,(first tail))))))

(define (square x) (* x x))
(prn (square 42))
(prn (square 81))

(define (but-last-arg _ :rest xs) xs)

(let ((x 0))
  (loop 
   (if (< x 10)
       (do (prn :counter x)
	   (set x (+ x 1)))
       (return-from #nil))))

(prn `(:a `(:b ,:c ,@xs)))
