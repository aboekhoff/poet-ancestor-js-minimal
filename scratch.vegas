(require vegas)

;; can redefine with generic versions (much) later

(define* first (fn* (arr) (. arr 0)))
(define* rest  (fn* (arr) (.slice arr 1)))
(define* core-symbol (fn* (name) (.coreSymbol Symbol name)))

;; redefine later


(define-macro* define 
  (fn* (sexp env)
       (let ((head (first (rest sexp)))
	     (tail (rest (rest sexp))))
	 (if (array? head)
	     (let ((name (first head))
		   (args (rest head)))
	       (array (core-symbol "define*")
		      name
		      (array (core-symbol "fn*")
			     args
			     (array* (core-symbol "block")
				     name
				     tail))))
	     
	     (array (core-symbol "define*")
		    head
		    (first tail))))))

(define (square x) (* x x))
(prn (square 42))
(prn (square 81))


