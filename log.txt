[READ SEXP]
(require vegas)

[EXPAND SEXP]
("EXPRESSION" "vegas required")

[NORMALIZE]
("CONST" "vegas required")

[COMPILE]
()

[EMIT]

[READ SEXP]
(define* first (fn* (arr) (. arr 0)))

[EXPAND SEXP]
("EXPRESSION" (vegas::set test::first (vegas::fn* (arr) (vegas::. arr 0))))

[NORMALIZE]
("SET" ("GLOBAL" "test" "first") ("FUN" (("LOCAL" "arr")) ("PROPERTY" ("LOCAL" "arr") ("CONST" 0))))

[COMPILE]
(("SET" ("GLOBAL" "test" "first") ("FUN" (("ARG" 1 0)) (("DECLARE" 1 1) ("SET" ("LOCAL" 1 0) ("PROPERTY" ("ARG" 1 0) ("CONST" 0))) ("RETURN" ("LOCAL" 1 0))))))

[EMIT]
RT["test::first"] = function(arg_1_0) {
    var local_1_0;
    local_1_0 = arg_1_0[0];
    return local_1_0;
};

[READ SEXP]
(define* rest (fn* (arr) (.slice arr 1)))

[EXPAND SEXP]
("EXPRESSION" (vegas::set test::rest (vegas::fn* (arr) ((vegas::. arr "slice") 1))))

[NORMALIZE]
("SET" ("GLOBAL" "test" "rest") ("FUN" (("LOCAL" "arr")) ("CALL" ("PROPERTY" ("LOCAL" "arr") ("CONST" "slice")) (("CONST" 1)))))

[COMPILE]
(("SET" ("GLOBAL" "test" "rest") ("FUN" (("ARG" 1 0)) (("DECLARE" 1 1) ("SET" ("LOCAL" 1 0) ("CALL" ("PROPERTY" ("ARG" 1 0) ("CONST" "slice")) (("CONST" 1)))) ("RETURN" ("LOCAL" 1 0))))))

[EMIT]
RT["test::rest"] = function(arg_1_0) {
    var local_1_0;
    local_1_0 = arg_1_0["slice"](1);
    return local_1_0;
};

[READ SEXP]
(define* core-symbol (fn* (name) (.coreSymbol Symbol name)))

[EXPAND SEXP]
("EXPRESSION" (vegas::set test::core-symbol (vegas::fn* (name) ((vegas::. vegas::Symbol "coreSymbol") name))))

[NORMALIZE]
("SET" ("GLOBAL" "test" "core-symbol") ("FUN" (("LOCAL" "name")) ("CALL" ("PROPERTY" ("GLOBAL" "vegas" "Symbol") ("CONST" "coreSymbol")) (("LOCAL" "name")))))

[COMPILE]
(("SET" ("GLOBAL" "test" "core-symbol") ("FUN" (("ARG" 1 0)) (("DECLARE" 1 1) ("SET" ("LOCAL" 1 0) ("CALL" ("PROPERTY" ("GLOBAL" "vegas" "Symbol") ("CONST" "coreSymbol")) (("ARG" 1 0)))) ("RETURN" ("LOCAL" 1 0))))))

[EMIT]
RT["test::core-symbol"] = function(arg_1_0) {
    var local_1_0;
    local_1_0 = RT["vegas::Symbol"]["coreSymbol"](arg_1_0);
    return local_1_0;
};

[READ SEXP]
(define-macro* define (fn* (sexp env) (let ((head (first (rest sexp))) (tail (rest (rest sexp)))) (if (array? head) (let ((name (first head)) (args (rest head))) (vegas::quasiquote ((vegas::unquote (core-symbol "define*")) (vegas::unquote name) ((vegas::unquote (core-symbol "fn*")) (vegas::unquote args) ((vegas::unquote (core-symbol "block")) (vegas::unquote name) (vegas::unquote-splicing tail)))))) (vegas::quasiquote ((vegas::unquote core-symbol) "define*" (vegas::unquote head) (vegas::unquote (first tail))))))))

[EXPAND SEXP]
("DEFINE_MACRO" define (vegas::fn* (sexp env) (vegas::let ((head (test::first (test::rest sexp))) (tail (test::rest (test::rest sexp)))) (vegas::if (vegas::array? head) (vegas::let ((name (test::first head)) (args (test::rest head))) (vegas::concat (vegas::array (test::core-symbol "define*")) (vegas::array name) (vegas::array (vegas::concat (vegas::array (test::core-symbol "fn*")) (vegas::array args) (vegas::array (vegas::concat (vegas::array (test::core-symbol "block")) (vegas::array name) tail)))))) (vegas::concat (vegas::array test::core-symbol) (vegas::array "define*") (vegas::array head) (vegas::array (test::first tail)))))))

[NORMALIZE]
("FUN" (("LOCAL" "sexp") ("LOCAL" "env")) ("LET" ((("LOCAL" "head") ("CALL" ("GLOBAL" "test" "first") (("CALL" ("GLOBAL" "test" "rest") (("LOCAL" "sexp")))))) (("LOCAL" "tail") ("CALL" ("GLOBAL" "test" "rest") (("CALL" ("GLOBAL" "test" "rest") (("LOCAL" "sexp"))))))) ("IF" ("CALL" ("GLOBAL" "vegas" "array?") (("LOCAL" "head"))) ("LET" ((("LOCAL" "name") ("CALL" ("GLOBAL" "test" "first") (("LOCAL" "head")))) (("LOCAL" "args") ("CALL" ("GLOBAL" "test" "rest") (("LOCAL" "head"))))) ("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "core-symbol") (("CONST" "define*"))))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" "name"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "core-symbol") (("CONST" "fn*"))))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" "args"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "core-symbol") (("CONST" "block"))))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" "name"))) ("LOCAL" "tail")))))))))))) ("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("GLOBAL" "test" "core-symbol"))) ("CALL" ("GLOBAL" "vegas" "array") (("CONST" "define*"))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" "head"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "first") (("LOCAL" "tail"))))))))))

[COMPILE_MACRO]
(("DECLARE" 0 1) ("SET" ("LOCAL" 0 0) ("FUN" (("ARG" 1 0) ("ARG" 1 1)) (("DECLARE" 1 6) ("SET" ("LOCAL" 1 1) ("CALL" ("GLOBAL" "test" "first") (("CALL" ("GLOBAL" "test" "rest") (("ARG" 1 0)))))) ("SET" ("LOCAL" 1 2) ("CALL" ("GLOBAL" "test" "rest") (("CALL" ("GLOBAL" "test" "rest") (("ARG" 1 0)))))) ("SET" ("LOCAL" 1 3) ("CALL" ("GLOBAL" "vegas" "array?") (("LOCAL" 1 1)))) ("IF" ("LOCAL" 1 3) (("SET" ("LOCAL" 1 4) ("CALL" ("GLOBAL" "test" "first") (("LOCAL" 1 1)))) ("SET" ("LOCAL" 1 5) ("CALL" ("GLOBAL" "test" "rest") (("LOCAL" 1 1)))) ("SET" ("LOCAL" 1 0) ("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "core-symbol") (("CONST" "define*"))))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" 1 4))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "core-symbol") (("CONST" "fn*"))))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" 1 5))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "core-symbol") (("CONST" "block"))))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" 1 4))) ("LOCAL" 1 2))))))))))))) (("SET" ("LOCAL" 1 0) ("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("GLOBAL" "test" "core-symbol"))) ("CALL" ("GLOBAL" "vegas" "array") (("CONST" "define*"))) ("CALL" ("GLOBAL" "vegas" "array") (("LOCAL" 1 1))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "test" "first") (("LOCAL" 1 2)))))))))) ("RETURN" ("LOCAL" 1 0))))) ("RETURN" ("LOCAL" 0 0)))

[EMIT_MACRO]
function anonymous(RT) {

var local_0_0;
local_0_0 = function(arg_1_0, arg_1_1) {
    var local_1_0, local_1_1, local_1_2, local_1_3, local_1_4, local_1_5;
    local_1_1 = RT["test::first"](RT["test::rest"](arg_1_0));
    local_1_2 = RT["test::rest"](RT["test::rest"](arg_1_0));
    local_1_3 = RT["vegas::array?"](local_1_1);
    if(local_1_3) {
        local_1_4 = RT["test::first"](local_1_1);
        local_1_5 = RT["test::rest"](local_1_1);
        local_1_0 = RT["vegas::concat"](RT["vegas::array"](RT["test::core-symbol"]("define*")), RT["vegas::array"](local_1_4), RT["vegas::array"](RT["vegas::concat"](RT["vegas::array"](RT["test::core-symbol"]("fn*")), RT["vegas::array"](local_1_5), RT["vegas::array"](RT["vegas::concat"](RT["vegas::array"](RT["test::core-symbol"]("block")), RT["vegas::array"](local_1_4), local_1_2)))));
    } else {
        local_1_0 = RT["vegas::concat"](RT["vegas::array"](RT["test::core-symbol"]), RT["vegas::array"]("define*"), RT["vegas::array"](local_1_1), RT["vegas::array"](RT["test::first"](local_1_2)));
    };
    return local_1_0;
};
return local_0_0;
}
[READ SEXP]
(define (square x) (* x x))

[MACROEXPAND1]
(define (square x) (* x x))
(vegas::define* square (vegas::fn* (x) (vegas::block square (* x x))))

[EXPAND SEXP]
("EXPRESSION" (vegas::set test::square (vegas::fn* (x) (vegas::block square (vegas::* x x)))))

[NORMALIZE]
("SET" ("GLOBAL" "test" "square") ("FUN" (("LOCAL" "x")) ("BLOCK" ("LABEL" "#square") ("CALL" ("GLOBAL" "vegas" "*") (("LOCAL" "x") ("LOCAL" "x"))))))

[COMPILE]
(("SET" ("GLOBAL" "test" "square") ("FUN" (("ARG" 1 0)) (("DECLARE" 1 1) ("BLOCK" ("LABEL" 1 0 #f ) (("SET" ("LOCAL" 1 0) ("CALL" ("GLOBAL" "vegas" "*") (("ARG" 1 0) ("ARG" 1 0)))))) ("RETURN" ("LOCAL" 1 0))))))

[EMIT]
RT["test::square"] = function(arg_1_0) {
    var local_1_0;
    block_1_0: {
        local_1_0 = RT["vegas::*"](arg_1_0, arg_1_0);
    };
    return local_1_0;
};

[READ SEXP]
(prn (square 42))

[EXPAND SEXP]
("EXPRESSION" (vegas::prn (test::square 42)))

[NORMALIZE]
("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "test" "square") (("CONST" 42)))))

[COMPILE]
(("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "test" "square") (("CONST" 42))))))

[EMIT]
RT["vegas::prn"](RT["test::square"](42));

[READ SEXP]
(prn (square 81))

[EXPAND SEXP]
("EXPRESSION" (vegas::prn (test::square 81)))

[NORMALIZE]
("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "test" "square") (("CONST" 81)))))

[COMPILE]
(("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "test" "square") (("CONST" 81))))))

[EMIT]
RT["vegas::prn"](RT["test::square"](81));

[READ SEXP]
(define (but-last-arg _ :rest xs) xs)

[MACROEXPAND1]
(define (but-last-arg _ :rest xs) xs)
(vegas::define* but-last-arg (vegas::fn* (_ :rest xs) (vegas::block but-last-arg xs)))

[EXPAND SEXP]
("EXPRESSION" (vegas::set test::but-last-arg (vegas::fn* (_ :rest xs) (vegas::block but-last-arg xs))))

[NORMALIZE]
("SET" ("GLOBAL" "test" "but-last-arg") ("FUN" (("LOCAL" "_")) ("DO" (("RESTARGS" ("LOCAL" "xs") 1) ("BLOCK" ("LABEL" "#but-last-arg") ("LOCAL" "xs"))))))

[COMPILE]
(("SET" ("GLOBAL" "test" "but-last-arg") ("FUN" (("ARG" 1 0)) (("DECLARE" 1 2) ("RESTARGS" ("LOCAL" 1 1) 1) ("BLOCK" ("LABEL" 1 0 #f ) (("SET" ("LOCAL" 1 0) ("LOCAL" 1 1)))) ("RETURN" ("LOCAL" 1 0))))))

[EMIT]
RT["test::but-last-arg"] = function(arg_1_0) {
    var local_1_0, local_1_1;
    local_1_1 = [];
    for(var i=1, ii=arguments.length; i<ii; i++) {
        local_1_1.push(arguments[i]);
    };
    block_1_0: {
        local_1_0 = local_1_1;
    };
    return local_1_0;
};

[READ SEXP]
(let ((x 0)) (loop (if (< x 10) (do (prn :counter x) (set x (+ x 1))) (return-from #nil))))

[EXPAND SEXP]
("EXPRESSION" (vegas::let ((x 0)) (vegas::loop (vegas::if (vegas::< x 10) (vegas::do ((vegas::prn :counter x) (vegas::set x (vegas::+ x 1)))) (vegas::return-from #nil #nil)))))

[NORMALIZE]
("LET" ((("LOCAL" "x") ("CONST" 0))) ("LOOP" ("IF" ("CALL" ("GLOBAL" "vegas" "<") (("LOCAL" "x") ("CONST" 10))) ("DO" (("CALL" ("GLOBAL" "vegas" "prn") (("KEYWORD" "counter") ("LOCAL" "x"))) ("SET" ("LOCAL" "x") ("CALL" ("GLOBAL" "vegas" "+") (("LOCAL" "x") ("CONST" 1)))))) ("RETURN_FROM" ("LABEL" "null") ("CONST" #nil)))))

[COMPILE]
(("DECLARE" 0 2) ("SET" ("LOCAL" 0 0) ("CONST" 0)) ("LOOP" ("LABEL" 0 0 #f #nil) (("SET" ("LOCAL" 0 1) ("CALL" ("GLOBAL" "vegas" "<") (("LOCAL" 0 0) ("CONST" 10)))) ("IF" ("LOCAL" 0 1) (("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "vegas" "Keyword") (("CONST" "counter"))) ("LOCAL" 0 0))) ("SET" ("LOCAL" 0 0) ("CALL" ("GLOBAL" "vegas" "+") (("LOCAL" 0 0) ("CONST" 1))))) (("LOCAL_EXIT" ("LABEL" 0 0 #f #nil)))))))

[EMIT]
var local_0_0, local_0_1;
local_0_0 = 0;
block_0_0:for(;;) {
    local_0_1 = RT["vegas::<"](local_0_0, 10);
    if(local_0_1) {
        RT["vegas::prn"](RT["vegas::Keyword"]("counter"), local_0_0);
        local_0_0 = RT["vegas::+"](local_0_0, 1);
    } else {
        break block_0_0;
    };
};

[READ SEXP]
(prn (vegas::quasiquote (:a (vegas::quasiquote (:b (vegas::unquote :c) (vegas::unquote-splicing xs))))))

[EXPAND SEXP]
("EXPRESSION" (vegas::prn (vegas::concat (vegas::array :a) (vegas::array (vegas::array (vegas::Symbol "vegas" "quasiquote") (vegas::array :b (vegas::array (vegas::Symbol "vegas" "unquote") :c) (vegas::array (vegas::Symbol "vegas" "unquote-splicing") (vegas::Symbol #nil "xs"))))))))

[NORMALIZE]
("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("KEYWORD" "a"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" "vegas") ("CONST" "quasiquote"))) ("CALL" ("GLOBAL" "vegas" "array") (("KEYWORD" "b") ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" "vegas") ("CONST" "unquote"))) ("KEYWORD" "c"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" "vegas") ("CONST" "unquote-splicing"))) ("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" #nil) ("CONST" "xs")))))))))))))))

[COMPILE]
(("CALL" ("GLOBAL" "vegas" "prn") (("CALL" ("GLOBAL" "vegas" "concat") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Keyword") (("CONST" "a"))))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" "vegas") ("CONST" "quasiquote"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Keyword") (("CONST" "b"))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" "vegas") ("CONST" "unquote"))) ("CALL" ("GLOBAL" "vegas" "Keyword") (("CONST" "c"))))) ("CALL" ("GLOBAL" "vegas" "array") (("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" "vegas") ("CONST" "unquote-splicing"))) ("CALL" ("GLOBAL" "vegas" "Symbol") (("CONST" #nil) ("CONST" "xs"))))))))))))))))

[EMIT]
RT["vegas::prn"](RT["vegas::concat"](RT["vegas::array"](RT["vegas::Keyword"]("a")), RT["vegas::array"](RT["vegas::array"](RT["vegas::Symbol"]("vegas", "quasiquote"), RT["vegas::array"](RT["vegas::Keyword"]("b"), RT["vegas::array"](RT["vegas::Symbol"]("vegas", "unquote"), RT["vegas::Keyword"]("c")), RT["vegas::array"](RT["vegas::Symbol"]("vegas", "unquote-splicing"), RT["vegas::Symbol"](null, "xs")))))));

